trigger:
- main

pool:
  vmImage: ubuntu-latest
  
# Define Variable for Environments
variables:
- name: DEV_ENVIRONMENT
  value: dev
- name: QA_ENVIRONMENT
  value: qa

stages:
- stage: TerraformValidate
  jobs:
    - job: TerraformValidateJob
      continueOnError: false
      steps:
      - task: PublishPipelineArtifact@1
        displayName: PublishArtifacts
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          artifact: 'terraform-manifests-out'
          publishLocation: 'pipeline'
      
      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
        inputs:
          terraformVersion: 'latest'
      
      - task: TerraformTaskV4@4
        displayName: Terraform INIT
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          backendServiceArm: 'terraform-aks-azurerm-svc-con'
          backendAzureRmResourceGroupName: 'terraform-storage-rg'
          backendAzureRmStorageAccountName: 'terraformstatestoragevvk'
          backendAzureRmContainerName: 'tfstatefiles'
          backendAzureRmKey: 'aks-base.tfstate'
          
      - task: TerraformTaskV4@4
        displayName: Terraform Validate
        inputs:
          provider: 'azurerm'
          command: 'validate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          
- stage: DeployAKS_ACR_Clusters
  jobs:
    - deployment: DeployDevAKS_ACR_Cluster
      displayName: DeployDevAKSCluster
      pool:
        vmImage: 'ubuntu-latest'
      environment: $(DEV_ENVIRONMENT)      
      strategy:
        runOnce:
          deploy:
            steps:
               - task: DownloadSecureFile@1
                 displayName: Download SSH Key
                 name: sshkey
                 inputs:
                    secureFile: 'aks-terraform-devops-ssh-key-ububtu.pub'
              
               - task: TerraformCLI@0
                 displayName: Terraform Init
                 inputs:
                  command: 'init'
                  workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                  backendType: 'azurerm'
                  backendServiceArm: 'terraform-aks-azurerm-svc-con'
                  backendAzureRmResourceGroupName: 'terraform-storage-rg'
                  backendAzureRmStorageAccountName: 'terraformstatestoragevvk'
                  backendAzureRmContainerName: 'tfstatefiles'
                  backendAzureRmKey: 'aks-$(DEV_ENVIRONMENT).tfstate'
                  allowTelemetryCollection: false


               - task: TerraformTaskV4@4
                 inputs:
                   provider: 'azurerm'
                   command: 'plan'
                   workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                   commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath) -var environment=$(DEV_ENVIRONMENT) -out $(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                   environmentServiceNameAzureRM: 'terraform-aks-azurerm-svc-con'
              
                 
               - task: TerraformTaskV4@4
                 inputs:
                  provider: 'azurerm'
                  command: 'apply'
                  workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                  commandOptions: '$(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                  environmentServiceNameAzureRM: 'terraform-aks-azurerm-svc-con'

        