trigger:


pool:
  vmImage: ubuntu-latest
  
# Define Variable for Environments
variables:
- name: INFRA_DEPLOY
  value: base
  

stages:
- stage: TerraformValidate
  jobs:
    - job: TerraformValidateJob
      continueOnError: false
      steps:
      - task: PublishPipelineArtifact@1
        displayName: PublishArtifacts
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          artifact: 'terraform-manifests-out'
          publishLocation: 'pipeline'
      
      - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0


      - task: TerraformTaskV4@4
        displayName: Terraform INIT
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          backendServiceArm: 'terraform-aks-azurerm-svc-con'
          backendAzureRmResourceGroupName: 'terraform-storage-rg'
          backendAzureRmStorageAccountName: 'terraformstatestoragevvk'
          backendAzureRmContainerName: 'tfstatefiles'
          backendAzureRmKey: 'aks-base.tfstate'


      - task: TerraformTaskV4@4
        displayName: Terraform Validate
        inputs:
          provider: 'azurerm'
          command: 'validate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          
- stage: DeployAKS_ACR_Clusters
  jobs:
    - deployment: DeployDevAKS_ACR_Cluster
      displayName: DeployDevAKSCluster
      pool:
        vmImage: 'ubuntu-latest'
      environment: $(INFRA_DEPLOY)      
      strategy:
        runOnce:
          deploy:
            steps:
               - task: DownloadSecureFile@1
                 displayName: Download SSH Key
                 name: sshkey
                 inputs:
                    secureFile: 'aks-terraform-devops-ssh-key-ububtu.pub'
              
               - task: TerraformCLI@0
                 displayName: Terraform Init
                 inputs:
                  command: 'init'
                  workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                  backendType: 'azurerm'
                  backendServiceArm: 'terraform-aks-azurerm-svc-con'
                  backendAzureRmResourceGroupName: 'terraform-storage-rg'
                  backendAzureRmStorageAccountName: 'terraformstatestoragevvk'
                  backendAzureRmContainerName: 'tfstatefiles'
                  backendAzureRmKey: 'aks-$(INFRA_DEPLOY).tfstate'
                  allowTelemetryCollection: false


               - task: TerraformTaskV4@4
                 inputs:
                   provider: 'azurerm'
                   command: 'plan'
                   workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                   commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath) -var environment=$(INFRA_DEPLOY) -out $(Pipeline.Workspace)/terraform-manifests-out/$(INFRA_DEPLOY)-$(Build.BuildId).out'
                   environmentServiceNameAzureRM: 'terraform-aks-azurerm-svc-con'
              
                 
               - task: TerraformTaskV4@4
                 inputs:
                  provider: 'azurerm'
                  command: 'apply'
                  workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                  commandOptions: '$(Pipeline.Workspace)/terraform-manifests-out/$(INFRA_DEPLOY)-$(Build.BuildId).out'
                  environmentServiceNameAzureRM: 'terraform-aks-azurerm-svc-con'

# Build Stage 
- stage: Build
  displayName: Build Stage
  jobs:
  - job: Build
    displayName: Build Job
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: replacetokens@5
        inputs:
          rootDirectory: '$(Build.SourcesDirectory)/src/MyHealth.Web/'
          targetFiles: 'appsettings.json'
          encoding: 'auto'
          tokenPattern: 'rm'
          writeBOM: true
          actionOnMissing: 'warn'
          keepToken: false
          actionOnNoFiles: 'continue'
          enableTransforms: false
          enableRecursion: false
          useLegacyPattern: false
          enableTelemetry: true
      - task: replacetokens@5
        inputs:
          rootDirectory: '$(Build.SourcesDirectory)/'
          targetFiles: 'mhc-aks-yaml'
          encoding: 'auto'
          tokenPattern: 'rm'
          writeBOM: true
          actionOnMissing: 'warn'
          keepToken: false
          actionOnNoFiles: 'continue'
          enableTransforms: false
          enableRecursion: false
          useLegacyPattern: false
          enableTelemetry: true
      
      
      - task: DockerCompose@0
        inputs:
          containerregistrytype: 'Azure Container Registry'
          azureSubscription: 'terraform-aks-azurerm-svc-con'
          azureContainerRegistry: '{"loginServer":"acrrg01.azurecr.io", "id" : "/subscriptions/83afe2ee-77f7-486b-a72e-6723cddc49ca/resourceGroups/terraform-aks-base/providers/Microsoft.ContainerRegistry/registries/acrrg01"}'
          dockerComposeFile: 'docker-compose.ci.build.yml'
          dockerComposeFileArgs: 'DOCKER_BUILD_SOURCE='
          action: 'Run services'
          detached: false
      - task: DockerCompose@0
        inputs:
          containerregistrytype: 'Azure Container Registry'
          azureSubscription: 'terraform-aks-azurerm-svc-con'
          azureContainerRegistry: '{"loginServer":"acrrg01.azurecr.io", "id" : "/subscriptions/83afe2ee-77f7-486b-a72e-6723cddc49ca/resourceGroups/terraform-aks-base/providers/Microsoft.ContainerRegistry/registries/acrrg01"}'
          dockerComposeFile: '**/docker-compose.yml'
          dockerComposeFileArgs: 'DOCKER_BUILD_SOURCE='
          action: 'Build services'
          additionalImageTags: '$(build.buildid)'
      
      - task: DockerCompose@0
        inputs:
          containerregistrytype: 'Azure Container Registry'
          azureSubscription: 'terraform-aks-azurerm-svc-con'
          azureContainerRegistry: '{"loginServer":"acrrg01.azurecr.io", "id" : "/subscriptions/83afe2ee-77f7-486b-a72e-6723cddc49ca/resourceGroups/terraform-aks-base/providers/Microsoft.ContainerRegistry/registries/acrrg01"}'
          dockerComposeFile: '**/docker-compose.yml'
          dockerComposeFileArgs: 'DOCKER_BUILD_SOURCE='
          action: 'Push services'
          additionalImageTags: '$(build.buildid)'
      

      - task: DockerCompose@0
        inputs:
            containerregistrytype: 'Azure Container Registry'
            azureSubscription: 'terraform-aks-azurerm-svc-con'
            azureContainerRegistry: '{"loginServer":"acrrg01.azurecr.io", "id" : "/subscriptions/83afe2ee-77f7-486b-a72e-6723cddc49ca/resourceGroups/terraform-aks-base/providers/Microsoft.ContainerRegistry/registries/acrrg01"}'
            dockerComposeFile: '**/docker-compose.yml'
            dockerComposeFileArgs: 'DOCKER_BUILD_SOURCE='
            action: 'Lock services'
            outputDockerComposeFile: '$(Build.StagingDirectory)/docker-compose.yml'
      - task: CopyFiles@2
        inputs:
          SourceFolder: '$(Agent.BuildDirectory)'
          Contents: |
            **/mhc-aks-yaml
            **/*.dacpac
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
      
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'drop'
          publishLocation: 'Container'